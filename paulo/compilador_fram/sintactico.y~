
%{
extern linea, retorint, retorcons, retortipo, retint, rea, nomb;
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "tds1.h"
#include "MP.h"
#define YYDEBUG 1
int cfallas=0;
int csente=0;
int canti=0;
static double retordouble;
static int numero;
static int pos=0;
%}
%union {
struct{
	int tipoe;
	int valore;
	double valorf;
	char valorc[100];
 }expre;  
 struct{
  char nombre[20];      /* nombre de la variable */
  int tipovar;		/*1=integer, 2=real, 3=char, 4=logico, 5=vacio, 6=error */
 }nam; 
struct{ 
int tipo;		/*1=integer, 2=real, 3=char */	
int construc;		/*1=básico, 2=puntero, 3=array */
int ini;
int fin;
int dim;
int log;	
}tipos;
int tipobas;
int intValue;
double doubleValue;
char stringValue[100];    
}

%type <tipos> t
%type <expre> e 
%type <expre> b
%type <expre> p
%type <tipos> a
%type <tipos> c
%type <tipos> f
%type <tipos> o
%type <tipos> l
%type <tipos> m
%type <tipos> u
%type <tipos> g
%type <tipos> d
%type <tipos> n
%type <tipos> s
%type <nam> y
%token <nam> ID  /* si tenemos un nombre de variable regresamos su indice */
%token <intValue> NUM 
%token <doubleValue> NUMREAL
%token <expre> CADENA 
%token <tipobas> CHAR
%token <tipobas> INTEGER
%token <tipobas> REAL
%token ARRAY DE NUEVA INICIO CONST DO ELSE END FOR IF NOT AND OR
%token PROCEDURE PROGRAM READ REPEAT THEN TO MOD DIV OF POW SQRT
%token UNTIL VAR WHILE WITH WRITE MY ME MYI MEI DIST
%left '+' '-'
%left '*' '/'
%%
l : l o NUEVA			{canti++;$$.tipo=$2.tipo;}
  | o NUEVA			{canti++;$$.tipo=$1.tipo;}
  | l error			{cfallas++;}
  ;
o : PROGRAM ID ';' NUEVA a '.'	{$$.tipo=busca($2.nombre);if(busca($2.nombre)==0) agrega($2.nombre);else printf("\n Variable ya declarada << %s >> en la linea %d", $2.nombre,linea+1);canti++;pos++;cargaMDP(pos,"nada",4,0,0.0,"nada",0,0);}
  ;
a : CONST NUEVA d NUEVA f		{$$.tipo=$3.tipo;canti=canti+2;}
  | f				
  ;
d : ID '=' e ';'		 		{$$.tipo=$3.tipoe;agrega($1.nombre);if($3.tipoe==1){agregatipo($1.nombre, 1, 1, 0, 0, 0);agregavalorint($1.nombre, $3.valore);} else if($3.tipoe==2){agregatipo($1.nombre, 2, 1, 0, 0, 0);agregadouble($1.nombre, $3.valorf);} }
  | d NUEVA ID '=' e ';'	{$$.tipo=$5.tipoe;agrega($3.nombre);if($5.tipoe==1){agregatipo($3.nombre, 1, 1, 0, 0, 0);agregavalorint($3.nombre, $5.valore);} else if($5.tipoe==2){agregatipo($3.nombre, 2, 1, 0, 0, 0);agregadouble($3.nombre, $5.valorf);}}
  ;
f : VAR NUEVA g		{canti++;}
  ;
g : y u	 			{$$.tipo=$2.tipo;$$.construc=$2.construc;vari($$.tipo,$$.construc,$2.ini,$2.fin,$2.dim); if($$.construc==3)vec($1.nombre,$2.ini,$2.fin);}
  | g NUEVA y u			{$$.tipo=$4.tipo;$$.construc=$4.construc;vari($$.tipo,$$.construc,$4.ini,$4.fin,$4.dim); if($$.construc==3)vec($3.nombre,$4.ini,$4.fin);canti++;}
  | g NUEVA n			{canti++;}
  ;
u : ':' m ';'					{$$.tipo=$2.tipo;$$.construc=1;}
  | ':' '^' m ';'				{$$.tipo=$3.tipo;$$.construc=2;}
  | ':' ARRAY '[' p '.' '.' p ']' OF m ';'	{$$.tipo=$10.tipo;$$.construc=3;$$.ini=$4.valore;$$.fin=$7.valore;$$.dim=($$.fin-$$.ini+1);}
  ;
m : INTEGER			{$$.tipo=1;}		
  | CHAR			{$$.tipo=3;}
  | REAL			{$$.tipo=2;}
  ;
n : INICIO NUEVA h NUEVA END 	{canti=canti+2;}
  ;
h : s 			
  | h NUEVA s 			{canti++;}
  ;
s : IF '(' c ')'THEN NUEVA r ';'   	{canti++;}
  | WHILE '(' c ')' x		{}
  | REPEAT s UNTIL '(' c ')' ';' {}
  | FOR ID DE NUM TO NUM x	{}
  | READ '(' ID	')' ';'		{if(busca($3.nombre)==1){pos++;cargaMDP(pos, $3.nombre, 1, 0, 0.0, "nada", 1, 0);}else if(busca($3.nombre)==2){pos++;cargaMDP(pos, $3.nombre, 1, 0, 0.0, "nada", 2, 0);}else if(busca($3.nombre)==3){pos++;cargaMDP(pos, $3.nombre, 1, 0, 0.0, "nada", 3, 0);}}
  | WRITE '(' e ')' ';'		{if($3.tipoe==6)$$.tipo=6;else $$.tipo=5;if($3.tipoe==1){pos++;cargaMDP(pos, "nada", 2, $3.valore,0.0,"nada", 1, 0);}else if($3.tipoe==2){pos++;cargaMDP(pos, "nada", 2, 0, $3.valorf, "nada", 2, 0);}else if($3.tipoe==3){pos++;cargaMDP(pos, "nada", 2, 0, 0.0, $3.valorc, 3, 0);}}
  | WRITE '(' ID '[' NUM ']' ')' ';' {if(buscacons($3.nombre)==3){$$.tipo=5;if(busca($3.nombre)==1)if(verpos($3.nombre,$5)==1){printf("Error posicion no valida en la linea %d",linea+1);cfallas++;canti--;}else{pos++;cargaMDP(pos,$3.nombre,3,0,0.0,"nada",1,$5);}}}
  | e ';'			{if($1.tipoe==6)$$.tipo=6;else $$.tipo=5;}
  | ID DE e ';'			{if(busca($1.nombre)==$3.tipoe){$$.tipo=5;if($3.tipoe==2){pos++;cargaMDP(pos, $1.nombre, 6, 0,$3.valorf,"nada", 2, 0);agregadouble($1.nombre,$3.valorf);}else if($3.tipoe==1){pos++;cargaMDP(pos, $1.nombre, 6, $3.valore,0.0,"nada", 1, 0);agregavalorint($1.nombre,$3.valore);}else if($3.tipoe==3){pos++;cargaMDP(pos, $1.nombre, 5, 0,0.0,$3.valorc, 3, 0);agregavalorchar($1.nombre,$3.valorc);}} else {printf("\n Error de tipo en la variable << %s >> en la linea %d",$1.nombre,linea+1);cfallas++;canti--;}if(busca($1.nombre)==0){printf("\n Variable no declarada << %s >> en la linea %d", $1.nombre,linea+1);cfallas++;canti--;}}
  | ID '[' NUM ']' DE e ';'	{if((busca($1.nombre)==$6.tipoe)&&(buscacons($1.nombre)==3)){$$.tipo=5;if(verpos($1.nombre,$3)==1){printf("Error posicion no valida en la linea %d",linea+1);cfallas++;canti--;}else addint($1.nombre,$3,$6.valore);} else {printf("\n Error de tipo en la variable << %s >> en la linea %d",$1.nombre,linea+1);cfallas++;canti--;}}
  ;
x : DO NUEVA n ';'		{canti++;}
  ;
r : n 
  | r NUEVA ELSE NUEVA n	{canti=canti+2;}
  ;
c : c AND t 			{if($1.tipo==$3.tipo){$$.tipo=4;if(($1.log==$3.log)&&($1.log==1))$$.log=1;else $$.log=0;}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | c OR t 			{if($1.tipo==$3.tipo){$$.tipo=4;if(($1.log==$3.log)&&($1.log==0))$$.log=0;else $$.log=1;}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | NOT t 			{if($2.tipo==4){$$.tipo=4;if($2.log==1)$$.log=0;else if($2.log==0)$$.log=1;}}
  | t 				{$$.tipo=$1.tipo;$$.log=$1.log;}
  ;
t : ID '=' e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 1, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 1, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | ID ME e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 2, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 2, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | ID MY e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 3, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 3, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | ID MEI e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 4, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 4, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | ID MYI e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 5, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 5, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  | ID DIST e			{if(busca($1.nombre)==$3.tipoe){$$.tipo=4;if($3.tipoe==1)condicion($1.nombre, $3.valore, 0.0, 1, 6, $$.log);else if($3.tipoe==2)condicion($1.nombre, 0, $3.valorf, 2, 6, $$.log);}else {$$.tipo=6;printf("\n Error de tipo en la linea %d",linea+1);}}
  ;
e : e '+' b			{if($1.tipoe==$3.tipoe){if($3.tipoe==1){$$.tipoe=$3.tipoe;$$.valore=($1.valore+$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else if($3.tipoe==2){$$.tipoe=$3.tipoe;$$.valorf=($1.valorf+$3.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}else if($3.tipoe==3){strcat($1.valorc,$3.valorc);strcpy($$.valorc,$1.valorc);pos++;cargaMDP(pos, "nada", 5, 0,0.0,$$.valorc, 3, 0);}}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | e '-' b			{if($1.tipoe==$3.tipoe){if($3.tipoe==1){$$.tipoe=$3.tipoe;$$.valore=($1.valore-$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else if($3.tipoe==2){$$.tipoe=$3.tipoe;$$.valorf=($1.valorf-$3.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | b				{$$.tipoe=$1.tipoe;if($1.tipoe==1)$$.valore=$1.valore;else if($1.tipoe==2)$$.valorf=$1.valorf;else if($1.tipoe==3)strcpy($$.valorc,$1.valorc);}
  ;
b : b '*' p			{if($1.tipoe==$3.tipoe){if($3.tipoe==1){$$.tipoe=$3.tipoe;$$.valore=($1.valore*$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else if($3.tipoe==2){$$.tipoe=$3.tipoe;$$.valorf=($1.valorf*$3.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | b '/' p			{if($1.tipoe==$3.tipoe){if($3.tipoe==1){$$.tipoe=$3.tipoe;$$.valore=($1.valore/$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else if($3.tipoe==2){$$.tipoe=$3.tipoe;$$.valorf=($1.valorf/$3.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | b DIV p			{if(($1.tipoe==$3.tipoe)&&($3.tipoe==1)){$$.tipoe=$3.tipoe;$$.valore=($1.valore/$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | b MOD p			{if(($1.tipoe==$3.tipoe)&&($3.tipoe==1)){$$.tipoe=$3.tipoe;$$.valore=($1.valore%$3.valore);pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | p				{$$.tipoe=$1.tipoe;if($1.tipoe==1)$$.valore=$1.valore;else if($1.tipoe==2)$$.valorf=$1.valorf;else if($1.tipoe==3)strcpy($$.valorc,$1.valorc);}
  ;
p : '(' e ')'			{$$.tipoe=$2.tipoe;if($2.tipoe==1)$$.valore=$2.valore;else if($2.tipoe==2)$$.valorf=$2.valorf;else if($2.tipoe==3)strcpy($$.valorc,$2.valorc);}
  | POW '(' e ',' e ')'         {if($3.tipoe==2 && $5.tipoe==2){$$.tipoe=2;$$.valorf=pow($3.valorf,$5.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | SQRT '(' e ')' 		{if($3.tipoe==2){$$.tipoe=2;$$.valorf=sqrt($3.valorf);pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}else {$$.tipoe=6;printf("\n Error de tipo en la linea %d",linea+1);cfallas++;canti--;}}
  | NUM				{$$.tipoe=1;$$.valore=$1;pos++;cargaMDP(pos, "nada", 5, $$.valore,0.0,"nada", 1, 0);}
  | NUMREAL			{$$.tipoe=2;$$.valorf=$1;pos++;cargaMDP(pos, "nada", 5, 0,$$.valorf,"nada", 2, 0);}
  | CADENA			{$$.tipoe=3;strcpy($$.valorc,$1.valorc);pos++;cargaMDP(pos, "nada", 5, 0,0.0,$$.valorc, 3, 0);}
  | ID				{$$.tipoe=busca($1.nombre);if($$.tipoe==1){pos++;cargaMDP(pos, $1.nombre, 4, 0,0.0,"nada", 1, 0);$$.valore=valorint($1.nombre);}else if($$.tipoe==2){pos++;cargaMDP(pos, $1.nombre, 4, 0,0.0,"nada", 2, 0);$$.valorf=valordouble($1.nombre);}else if($$.tipoe==3){pos++;cargaMDP(pos, $1.nombre, 4, 0,0.0,"nada", 3, 0);valorchar($1.nombre,$$.valorc);} if(busca($1.nombre)==0) {printf("\n Variable no declarada << %s >> en la linea %d", $1.nombre,linea+1);cfallas++;canti--;}}
  ;
y : ID				{strcpy($$.nombre,$1.nombre);agrega($1.nombre);varios($1.nombre);}
  | y ',' ID			{strcpy($$.nombre,$3.nombre);agrega($3.nombre);varios($3.nombre);}
  ;
%%

main( int argc, char *argv[] )
{ extern FILE *yyin;
++argv; --argc;
yyin = fopen( argv[0], "r" );
/*yydebug = 1;*/

yyparse();
printf("\n Parse completado.");
printf("\n Cantidad de lineas analizadas: %d", linea);
printf("\n Cantidad de sentencias validas= %d\n\n", canti);
if (cfallas>0)printf("\n Cantidad de errores= %d", cfallas);
if(cfallas==0)
MaquinaPila();

}

yyerror(char *s)
{
cfallas++;
fprintf(stderr," %s", s);
printf(" en la linea %d\n",linea+1);
}


int yywrap(void){} 

